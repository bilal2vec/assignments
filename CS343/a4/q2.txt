# Q2

## (a)

### i

Rule 5, starvation. if you while loop over `you == WantIn` instead of over `::Last == &me`, this means that there is the potential for a thread to set `me = DontWantIn` (line 10) and then immediately reset its intent `me = WantIn` (line 2) before the other thread busy waiting on `while (you = WantIn)` (line 6) has a chance to run, check for the change to `you` and exit the loop to enter the critical section.

### ii

This is unlikely to cause a failure because we will have context switches between a thread exiting and entering the critical section. Also, more importantly, eventually one thread will reach the limit of 10,000,000 aquires and releases of the critical section and the other thread will be free to enter the critical section as many times as necessary required to finish its execution.

## (b)

If you set `you = DontWantIn` before `::Last = me` this defeats the purpose of Decker's low-priority busy wait. A thread trying to enter the critical section first checks for `you == DontWantIn` and in the case that the conditional is false, retracts its intent and busy waits until `::Last != me`. The reason for setting `you = DontWantIn` after `::Last = me` is to ensure that if there is a context switch between the two statements to a new thread trying to enter the critical section, the new thread will enter the low-priority busy wait loop and not immediately exit the high-priority busy wait loop.